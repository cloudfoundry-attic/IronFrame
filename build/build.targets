<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Default">
    
    <PropertyGroup>
        <MSBuildCommunityTasksPath>$(MSBuildThisFileDirectory)\MSBuildTasks\tools</MSBuildCommunityTasksPath>
    </PropertyGroup>

    <Import Project="$(MSBuildThisFileDirectory)\MSBuildTasks\tools\MSBuild.Community.Tasks.targets" />
    
    <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)\xunit.runners\tools\xunit.runner.msbuild.dll"
        TaskName="Xunit.Runner.MSBuild.xunit" />
     
    <!-- Define Default Properties -->
    <PropertyGroup>
        <!-- TeamCity / build system properties -->
        <BuildBranch Condition=" '$(BuildBranch)' == '' and '$(BUILD_BRANCH)' == '&lt;default&gt;' ">master</BuildBranch>
        <BuildBranch Condition=" '$(BuildBranch)' == '' ">$(BUILD_BRANCH)</BuildBranch>
        <BuildBranch Condition=" '$(BuildBranch)' == '' ">DevLocal</BuildBranch>
        
        <BuildIsPrivate Condition=" '$(BuildIsPrivate)' == '' and '$(BuildBranch)' == 'master' ">False</BuildIsPrivate>
        <BuildIsPrivate Condition=" '$(BuildIsPrivate)' == '' ">True</BuildIsPrivate>
        
        <BuildVersion Condition=" '$(BuildVersion)' == '' ">$(BUILD_NUMBER)</BuildVersion>
        <BuildVersion Condition=" '$(BuildVersion)' == '' ">0.0.0</BuildVersion>
        
        <BuildCommit Condition=" '$(BuildCommit)' == '' and '$(BuildIsPrivate)' == 'False' ">$(BUILD_VCS_NUMBER)</BuildCommit>
        <BuildCommit Condition=" '$(BuildCommit)' == '' and '$(BuildIsPrivate)' == 'True' ">$(BuildBranch)</BuildCommit>
        
        <NuGetIsPreRelease>$(BuildIsPrivate)</NuGetIsPreRelease>
        
        <NuGetPreReleaseName Condition=" '$(NuGetIsPreRelease)' == 'True' ">$(BuildBranch)</NuGetPreReleaseName>
        <!-- NOTE: The NuGet PreRelease value is limited to 20 characters. -->
        <NuGetPreReleaseName Condition=" $(NuGetPreReleaseName.Length) &gt; 20 ">$(NuGetPreReleaseName.Substring(0, 20))</NuGetPreReleaseName>
        
        <NuGetVersion Condition=" '$(NuGetIsPreRelease)' != 'True' ">$(BuildVersion)</NuGetVersion>
        <NuGetVersion Condition=" '$(NuGetIsPreRelease)' == 'True' ">$(BuildVersion)-$(NuGetPreReleaseName)</NuGetVersion>
        <CurrentDate>$([System.DateTime]::Now.ToString(yyyyMMddHHmmss))</CurrentDate>
        <NuGetVersion Condition=" '$(NuGetIsPreRelease)' == 'True' ">$([System.DateTime]::Now.ToString(0.yyyyMMdd.HHmmss))-$(NuGetPreReleaseName)</NuGetVersion>

        <BuildInParallel Condition=" '$(BuildInParallel)' == '' And $(MSBuildNodeCount) &gt; 1 ">true</BuildInParallel>
        <BuildInParallel Condition=" '$(BuildInParallel)' == '' ">false</BuildInParallel>
    </PropertyGroup>
    
    <!-- Extensibility Points -->
    <Target Name="ResolveTestAssemblies"></Target>
    <Target Name="AfterPackageOutput"></Target>

    <!-- Standard / Generic Targets -->
    <Target Name="SetInternalProperties">
        <PropertyGroup>            
            <OutputDir Condition=" '$(OutputDir)' == '' ">$(BUILD_ROOT)</OutputDir>
            <OutputDir Condition=" '$(OutputDir)' == '' and '$(SolutionDir)' != '' ">$(SolutionDir)\output\$(BuildVersion)\</OutputDir>
            <BinOutputDir>$(OutputDir)binaries\</BinOutputDir>
            <NugetOutputDir>$(OutputDir)nuget\</NugetOutputDir>
        </PropertyGroup>

        <Message Text="BuildIsPrivate: $(BuildIsPrivate)" />
        <Message Text="BuildBranch: $(BuildBranch)" />
        <Message Text="BuildVersion: $(BuildVersion)" />
        <Message Text="BuildCommit: $(BuildCommit)" />
        <Message Text="NuGetVersion: $(NuGetVersion)" />
    </Target>

    <Target Name="FindNuGet">
        <ItemGroup>
            <FindNuGetExe
                Condition=" '$(NuGetExe)' == '' "
                Include="$(MSBuildThisFileDirectory)\**\nuget.exe;" />
        </ItemGroup>
        <PropertyGroup>
            <!-- The %(FindNuGetExe.Identity) syntax will use the last item in the set. -->
            <NuGetExe Condition=" '$(NuGetExe)' == '' ">%(FindNuGetExe.Identity)</NuGetExe>
        </PropertyGroup>
        <Error Text="NuGet.exe cannot be found." Condition=" !Exists('$(NuGetExe)') " />
        <Message Text="Found NuGet.exe at '$(NuGetExe)'." Condition=" Exists('$(NuGetExe)') " />
    </Target>
    
    <Target Name="SetVersion">
        <!-- Update all version files -->
        <Message Text="BuildVersion: $(BuildVersion)" />
        <Message Text="BuildCommit: $(BuildCommit)" />

        <ItemGroup>
            <VersionFileLines Include="// This code was generated by a tool. Changes will be lost." />
            <VersionFileLines Include="using System%3b" />
            <VersionFileLines Include="using System.Reflection%3b" />
            <VersionFileLines Include="using System.Resources%3b" />
            <VersionFileLines Include="using System.Runtime.CompilerServices%3b" />
            <VersionFileLines Include="using System.Runtime.InteropServices%3b" />
            <VersionFileLines Include="[assembly: AssemblyCompany(&quot;Cloud Foundry Foundation&quot;)]" />
            <VersionFileLines Include="[assembly: AssemblyCopyright(&quot;Â© 2015 Cloud Foundry Foundation&quot;)]" />
            <VersionFileLines Include="[assembly: AssemblyProduct(&quot;Cloud Foundry&quot;)]" />
            <VersionFileLines Include="[assembly: AssemblyVersion(&quot;$(BuildVersion)&quot;)]" />
            <VersionFileLines Include="[assembly: AssemblyFileVersion(&quot;$(BuildVersion)&quot;)]" />
            <VersionFileLines Include="[assembly: AssemblyInformationalVersion(&quot;$(BuildCommit)&quot;)]" />
        </ItemGroup>
        
        <ReadLinesFromFile File="%(VersionFile.FullPath)" Condition=" Exists('%(VersionFile.FullPath)') ">
            <Output TaskParameter="Lines" ItemName="ExistingVersionFileLines" />
        </ReadLinesFromFile>
        
        <RemoveDuplicates Inputs="@(ExistingVersionFileLines);@(VersionFileLines)">
            <Output TaskParameter="Filtered" ItemName="UniqueVersionFileLines" />
        </RemoveDuplicates>
        
        <PropertyGroup>
            <VersionLineCount>@(VersionFileLines->Count())</VersionLineCount>
            <UniqueVersionLineCount>@(UniqueVersionFileLines->Count())</UniqueVersionLineCount>
        </PropertyGroup>
        
        <WriteLinesToFile
            File="%(VersionFile.FullPath)"
            Lines="@(VersionFileLines)"
            Overwrite="true"
            Condition=" Exists('%(VersionFile.FullPath)') and $(UniqueVersionLineCount) != $(VersionLineCount) " />
    </Target>

    <Target Name="PackageRestore">
        <MsBuild Projects="$(MSBuildThisFileDirectory)package-restore.targets" Targets="RestorePackages" />
    </Target>
    
    <Target Name="Clean" DependsOnTargets="SetInternalProperties">
        <MSBuild Projects="@(SolutionFile)" 
            Properties="Configuration=$(Configuration);Platform=$(Platform)"
            Targets="Clean">
        </MSBuild>
        <ItemGroup>
            <OutputDirToClean Include="$(BinOutputDir)" />
        </ItemGroup>
        <RemoveDir Directories="@(OutputDirToClean)" />
        <ItemGroup>
            <OutputFileToClean Include="$(OutputDir)\*" />
        </ItemGroup>
        <Delete Files="@(OutputFileToClean)" />
    </Target>
    
    <Target Name="Build" DependsOnTargets="PackageRestore;SetInternalProperties;SetVersion">
        <!-- Build the solution -->
        <MSBuild Condition=" '@(SolutionFile)' != '' " 
            Projects="@(SolutionFile)" 
            Properties="Configuration=$(Configuration);Platform=$(Platform)"
            Targets="Build" />
    </Target>
    
    <Target Name="Test" DependsOnTargets="Build;ResolveTestAssemblies">
        <Message Text="&#10;Test Assembly: %(TestAssembly.Identity)" />
        
        <Message Text="There are no unit tests!" Importance="High" Condition=" '@(TestAssembly)' == '' " />
        <ItemGroup>
            <TestTask Include="$(MSBuildProjectFile)">
                <Properties>File=%(TestAssembly.Identity)</Properties>
            </TestTask>
        </ItemGroup>
        <MSBuild Projects="@(TestTask)" BuildInParallel="$(BuildInParallel)" Targets="_TestSingle" Condition=" '@(TestAssembly)' != '' " />
    </Target>
    
    <Target Name="_TestSingle">
        <xunit Assemblies="$(File)" ParallelizeAssemblies="$(XUnitParallelizeAssemblies)" ParallelizeTestCollections="$(XUnitParallelizeTestCollections)" />
    </Target>

    <Target Name="PackageBinaries" DependsOnTargets="Build">
        <ItemGroup>
            <PackagedOutput Include="$(SolutionDir)\**\bin\$(Configuration)\**"></PackagedOutput>
        </ItemGroup>

        <RemoveDir Condition="Exists('$(BinOutputDir)')" Directories="$(BinOutputDir)" />

        <Copy SourceFiles="@(PackagedOutput)" DestinationFolder="$(BinOutputDir)" />
    </Target>
    
    <Target Name="PackageNuget" DependsOnTargets="Build;FindNuGet">
        <RemoveDir Condition="Exists('$(NugetOutputDir)')" Directories="$(NugetOutputDir)" />

        <MakeDir Directories="$(NugetOutputDir)" />
        
        <Exec Command='"$(NuGetExe)" pack "%(NugetPackage.Identity)" -Prop "Configuration=$(Configuration)" -OutputDirectory "$(NugetOutputDir.TrimEnd(&quot;\&quot;))" -Version "$(NuGetVersion)"' />
    </Target>

    <Target Name="Package" DependsOnTargets="PackageBinaries;PackageNuget">
    </Target>
    
    <!-- External Targets (i.e. called from the command-line or build server -->
    <Target Name="Default" DependsOnTargets="Build;Test;Package">
    </Target>
    
    <Target Name="CI" DependsOnTargets="Clean;Default">
    </Target>
    
</Project>
